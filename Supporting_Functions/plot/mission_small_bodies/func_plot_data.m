function func_plot_data( ...
    ms, ...
    mission_true_time, ...
    mission_true_small_body, ...
    mission_true_solar_system, ...
    mission_init_data, ...
    mission_true_SC, ...
    fig_number, ...
    plot_name_prefix)

% ms = ms;
k = ms.true_time.counter;
plot_SC_number = ms.plot_parameters.plot_SC_number;

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Data
fig_number = fig_number+1;
plot_handle = figure(fig_number);
clf
set(plot_handle,'Color',[1 1 1]);
set(plot_handle,'units','normalized','outerposition',[0 0 1 1])
set(plot_handle,'PaperPositionMode','auto');

n = mission_true_SC{plot_SC_number}.software_SC_communication.number_communication;

subplot(2,3,1)

for i =1:mission_true_SC{plot_SC_number}.true_SC_onboard_memory.num_memory
    semilogy(ms.true_time.time_array(1:k),ms.true_SC{plot_SC_number}.SC_Data_Volume(1:k,i),'-k','LineWidth',2,'DisplayName',['Onboard storage / memory ',num2str(i)],'Color',ms.plot_parameters.color_array(i))
    hold on
end
for i =1:mission_true_SC{plot_SC_number}.true_SC_onboard_memory.num_memory
    semilogy([ms.true_time.time_array(1) ms.true_time.time_array(k)], mission_true_SC{plot_SC_number}.true_SC_onboard_memory.memory_data(i).maximum_data_storage*[1 1],'--r','LineWidth',2,'DisplayName',['Max storage / memory ',num2str(i)],'Color',ms.plot_parameters.color_array(i))
end
for i =1:n
    if mission_true_SC{plot_SC_number}.software_SC_communication.comm_direction(i) == 1
        semilogy(ms.true_time.time_array(1:k),ms.true_SC{plot_SC_number}.SC_communication_data(1:k,3*n+i),'-k','LineWidth',2,'DisplayName',['Received from SC ',num2str(mission_true_SC{plot_SC_number}.software_SC_communication.comm_interlocutor(i))],'Color',ms.plot_parameters.color_array(i))
    end
end

grid on
legend
xlabel('Time [sec]')
ylabel('Data Volume [GB]')
title('SC Data Volume Generated and Stored')
set(gca, 'FontSize',ms.plot_parameters.standard_font_size,'FontName','Times New Roman')
hold off

%                 subplot(2,3,4)
%
%                 semilogy(ms.true_time.time_array(1:k),ms.true_SC{plot_SC_number}.SC_DTE(1:k,4),'-k','LineWidth',2,'DisplayName','Total DTE Data')
%                 hold on
%                 semilogy(ms.true_time.time_array(1:k),ms.true_SC{plot_SC_number}.SC_Data_Volume(1:k,2),'-b','LineWidth',2,'DisplayName','Total Data Generated by SC')
%                 %             semilogy([ms.true_time.time_array(1) ms.true_time.time_array(k)],True_SC_data_volume.data_storage_maximum*[1 1],'--r','LineWidth',2,'DisplayName','Max Onboard Data Storage')
%
%                 grid on
%                 legend('Location','northwest')
%                 xlabel('Time [sec]')
%                 ylabel('Data Volume [GB]')
%                 title('Total SC Data generated, sent to Earth')
%                 set(gca, 'FontSize',ms.plot_parameters.standard_font_size,'FontName','Times New Roman')
%                 hold off

isotropic_already_plotted = zeros(1,mission_true_SC{plot_SC_number}.software_SC_communication.number_communication);

for i=1:n
    id_antenna = mission_true_SC{plot_SC_number}.software_SC_communication.commu_use_antenna_index(i);
    isotropic = mission_true_SC{plot_SC_number}.true_SC_radio.antenna_data(id_antenna).antenna_gain*ones(size(mission_true_SC{plot_SC_number}.true_SC_radio.antenna_data(id_antenna).radiation_pattern(1,:)));
    subplot(2,3,2)
    
    if any(isotropic_already_plotted==id_antenna) == 0 % If this antenna pattern hasn't been plotted yet
        polarplot(mission_true_SC{plot_SC_number}.true_SC_radio.antenna_data(id_antenna).radiation_pattern(1,:), mission_true_SC{plot_SC_number}.true_SC_radio.antenna_data(id_antenna).radiation_pattern(2,:), 'Linewidth',2,'Color','blue','DisplayName',['antenna ',num2str(id_antenna), ' pattern']);
        hold on;
        polarplot(mission_true_SC{plot_SC_number}.true_SC_radio.antenna_data(id_antenna).radiation_pattern(1,:), isotropic, 'Linewidth',1,'Color','g','DisplayName',['isotropic antenna',num2str(id_antenna)]);
        hold on;
    end
    polarscatter(ms.true_SC{plot_SC_number}.SC_communication_data(1:k,i), mission_true_SC{plot_SC_number}.true_SC_radio.antenna_data(id_antenna).antenna_gain-ms.true_SC{plot_SC_number}.SC_communication_data(1:k,i+n),'filled','DisplayName',['observation for comm ',num2str(i)],'Color',ms.plot_parameters.color_array(i));
    isotropic_already_plotted(i) = id_antenna;
end
title('Spacecraft observation (Antenna POV)')
legend()
legend('Location','southwest')
set(gca, 'FontSize',ms.plot_parameters.standard_font_size,'FontName','Times New Roman')

subplot(2,3,3)
for i=1:mission_true_SC{plot_SC_number}.software_SC_communication.number_communication
    plot(ms.true_time.time_array(1:k),ms.true_SC{plot_SC_number}.SC_communication_data(1:k,2*n+i),'-b','LineWidth',2,'DisplayName',['comm ',num2str(i)],'Color',ms.plot_parameters.color_array(i))
    hold on;
end
legend()
xlabel('Time [sec]')
ylabel('[kbps]')
title('Data rate available ')
set(gca, 'FontSize',ms.plot_parameters.standard_font_size,'FontName','Times New Roman')

%                 subplot(2,3,6)
%                 plot(ms.true_time.time_array(1:k),ms.true_SC{plot_SC_number}.SC_DTE(1:k,3)/ms.true_time.time_step,'-b','LineWidth',2)
%                 xlabel('Time [sec]')
%                 ylabel('[kbps]')
%                 title('Actual Data rate used')
%                 set(gca, 'FontSize',ms.plot_parameters.standard_font_size,'FontName','Times New Roman')
%
%
%                 subplot(2,3,5)
%                 hold on
%                 plot(ms.true_time.time_array(1:k),ms.true_SC{plot_SC_number}.SC_DTE(1:k,1),'-k','LineWidth',2)
%                 plot(ms.true_time.time_array(1:k),ms.true_SC{plot_SC_number}.SC_DTE(1:k,2),'-b','LineWidth',2)
%
%                 grid on
%                 legend('SC executive : send data to Earth','SC data comms : desired attitude for DTE achieved')
%                 xlabel('Time [sec]')
%                 ylabel('Boolean')
%                 title('DTE Flags')
%                 set(gca, 'FontSize',ms.plot_parameters.standard_font_size,'FontName','Times New Roman')
%                 hold off
subplot(2,3,5)
hold on

fill([ms.true_time.time_array(1) ms.true_time.time_array(k) ms.true_time.time_array(k) ms.true_time.time_array(1)],[-1.25 -1.25 -0.75 -0.75],'g','EdgeColor','none','FaceAlpha',0.5,'DisplayName','DTE')
for i=1:mission_init_data.num_SC
    fill([ms.true_time.time_array(1) ms.true_time.time_array(k) ms.true_time.time_array(k) ms.true_time.time_array(1)],[(i-0.25) (i-0.25) (i+0.25) (i+0.25)],ms.plot_parameters.color_array(i),'EdgeColor','none','FaceAlpha',0.5,'DisplayName',['SC',num2str(i)])
end

plot(ms.true_time.time_array(1:k),ms.true_SC{plot_SC_number}.SC_communication_data(1:k,4*n+1),'-k','LineWidth',2)
grid on
legend()
title('Active comm interlocutor')

sgtitle(['Data Volume and DTE onboard SC',num2str(plot_SC_number)],'FontSize',ms.plot_parameters.title_font_size,'FontName','Times New Roman')

if ms.plot_parameters.storage_save_plots == 1
    saveas(plot_handle,[plot_name_prefix,'DTE.png']);
end
end