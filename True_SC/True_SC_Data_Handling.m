%% Class: True_SC_Data_Handling
% Tracks the Data Generated onboard the spacecraft

classdef True_SC_Data_Handling < handle

    %% Properties
    properties

        %% [ ] Properties: Initialized Variables

        mode_true_SC_data_handling_selector % [string] Select which Mode to run

        %% [ ] Properties: Variables Computed Internally

        instantaneous_data_change % [kb] Data generated - Data removed over mission.true_time.time_step sec

        instantaneous_data_generated % [kb] Data generated by HW and Classes over mission.true_time.time_step sec

        instantaneous_data_removed % [kb] Data removed by Communication over mission.true_time.time_step sec

        list_HW_data_generated % List of HW and Classes that generates data

        array_HW_data_generated % [kb] Total data generated by this HW and Class

        list_HW_data_removed % List of HW and Classes that removes data

        array_HW_data_removed % [kb] Total data removed by this HW and Class

        warning_counter % [integer] Counter stops the warning after 10 displays

        data % Other useful data

        %% [ ] Properties: Storage Variables

        store


    end

    %% Methods
    methods

        %% [ ] Methods: Constructor
        % Construct an instance of this class

        function obj = True_SC_Data_Handling(init_data, mission)

            obj.mode_true_SC_data_handling_selector = init_data.mode_true_SC_data_handling_selector;

            obj.instantaneous_data_change = 0; % [kb]
            obj.instantaneous_data_generated = 0; % [kb]
            obj.instantaneous_data_removed = 0; % [kb]

            obj.list_HW_data_generated = [];
            obj.array_HW_data_generated = [];
            obj.list_HW_data_removed = [];
            obj.array_HW_data_removed = [];

            obj.warning_counter = 0;

            if isfield(init_data, 'data')
                obj.data = init_data.data;
            else
                obj.data = [];
            end
            obj.data.store_instantaneous_data_change = obj.instantaneous_data_change; % [kb]

            % Initialize Variables to store
            obj.store = [];

            obj.store.instantaneous_data_change = zeros(mission.storage.num_storage_steps, length(obj.instantaneous_data_change));
            obj.store.instantaneous_data_generated = zeros(mission.storage.num_storage_steps, length(obj.instantaneous_data_generated));
            obj.store.instantaneous_data_removed = zeros(mission.storage.num_storage_steps, length(obj.instantaneous_data_removed));

        end

        %% [ ] Methods: Initialize list_HW_data_generated
        % Initialize list_HW_data_generated for HW and Classes

        function obj = func_initialize_list_HW_data_generated(obj, equipment, mission)

            this_name = equipment.name;
            flag_name_exisits = 0;

            for i = 1:1:length(obj.list_HW_data_generated)
                if strcmp( obj.list_HW_data_generated{i}, this_name )
                    flag_name_exisits = 1;
                end
            end

            if flag_name_exisits == 0
                i = length(obj.list_HW_data_generated);
                obj.list_HW_data_generated{i+1} = this_name;

                if isprop(equipment, 'instantaneous_data_rate_generated')
                    this_instantaneous_data_generated = (equipment.instantaneous_data_rate_generated * mission.true_time.time_step); % [kb]
                elseif isprop(equipment, 'instantaneous_data_generated_per_sample')
                    this_instantaneous_data_generated = equipment.instantaneous_data_generated_per_sample; % [kb]
                else
                    error('Data generated incorrect!')
                end

                obj.array_HW_data_generated(1,i+1) = this_instantaneous_data_generated; % [kb]
            end

        end


        %% [ ] Methods: Initialize list_HW_data_removed
        % Initialize list_HW_data_removed for HW and Classes

        function obj = func_initialize_list_HW_data_removed(obj, equipment, mission)

            this_name = equipment.name;
            flag_name_exisits = 0;

            for i = 1:1:length(obj.list_HW_data_removed)
                if strcmp( obj.list_HW_data_removed{i}, this_name )
                    flag_name_exisits = 1;
                end
            end

            if flag_name_exisits == 0
                i = length(obj.list_HW_data_removed);
                obj.list_HW_data_removed{i+1} = this_name;

                if isprop(equipment, 'instantaneous_data_rate_removed')
                    this_instantaneous_data_removed = (equipment.instantaneous_data_rate_removed * mission.true_time.time_step); % [kb]
                elseif isprop(equipment, 'instantaneous_data_removed_per_sample')
                    this_instantaneous_data_removed = equipment.instantaneous_data_removed_per_sample; % [kb]
                else
                    error('Data removed incorrect!')
                end

                obj.array_HW_data_removed(1,i+1) = this_instantaneous_data_removed; % [kb]
            end

        end



        %% [ ] Methods: Initialize Store
        % Initialize store of array_HW_data_generated and array_HW_data_removed

        function obj = func_initialize_store_HW_data_generated_removed(obj, mission)

            obj.store.list_HW_data_generated = obj.list_HW_data_generated;
            obj.store.list_HW_data_removed = obj.list_HW_data_removed;

            obj.store.array_HW_data_generated = zeros(mission.storage.num_storage_steps, length(obj.array_HW_data_generated));
            obj.store.array_HW_data_removed = zeros(mission.storage.num_storage_steps, length(obj.array_HW_data_removed));

            obj = func_update_true_SC_data_store(obj, mission);

        end

        %% [ ] Methods: Store
        % Update the store variable

        function obj = func_update_true_SC_data_store(obj, mission)

            if mission.storage.flag_store_this_time_step == 1
                obj.store.instantaneous_data_change(mission.storage.k_storage,:) = obj.data.store_instantaneous_data_change; % [kb]
                obj.store.instantaneous_data_generated(mission.storage.k_storage,:) = obj.instantaneous_data_generated; % [kb]
                obj.store.instantaneous_data_removed(mission.storage.k_storage,:) = obj.instantaneous_data_removed; % [kb]

                obj.store.array_HW_data_generated(mission.storage.k_storage,:) = obj.array_HW_data_generated; % [kb]

                if isempty(obj.array_HW_data_removed)
                    % Do nothing!
                else
                    obj.store.array_HW_data_removed(mission.storage.k_storage,:) = obj.array_HW_data_removed; % [kb]
                end
            end

        end

        %% [ ] Methods: Main
        % Main data handling code

        function obj = func_main_true_SC_data_handling(obj, mission, i_SC)

            switch obj.mode_true_SC_data_handling_selector

                case 'Generic'
                    obj = func_true_SC_data_handling_Generic(obj, mission, i_SC);

                case 'Nightingale'
                    obj = func_true_SC_data_handling_Nightingale(obj, mission, i_SC);

                otherwise
                    error('Data Handling mode not defined!')
            end

            % Store
            obj = func_update_true_SC_data_store(obj, mission);

            % Reset All Variables
            obj.instantaneous_data_change = 0; % [kb]
            obj.instantaneous_data_generated = 0; % [kb]
            obj.instantaneous_data_removed = 0; % [kb]

        end

        %% [ ] Methods: Main Function for Generic
        % Generic data handling code

        function obj = func_true_SC_data_handling_Generic(obj, mission, i_SC)

            obj.instantaneous_data_change = (obj.instantaneous_data_generated - obj.instantaneous_data_removed); % [kb]
            obj.data.store_instantaneous_data_change = obj.instantaneous_data_change; % [kb]

            if obj.instantaneous_data_change > 0
                % Add Data to Memory

                for i_memory = 1:1:mission.true_SC{i_SC}.true_SC_body.num_hardware_exists.num_onboard_memory

                    if mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity >= mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.maximum_capacity
                        % Skip this memory

                    elseif (mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.maximum_capacity - mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity) <= obj.instantaneous_data_change
                        % Fill this memory as much as possible
                        obj.instantaneous_data_change = obj.instantaneous_data_change - (mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.maximum_capacity - mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity); % [kb]
                        mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity = mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.maximum_capacity; % [kb]

                    else
                        % Put entirely in this memory
                        mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity = mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity + obj.instantaneous_data_change; % [kb]
                        obj.instantaneous_data_change = 0; % [kb]

                    end

                end

                if obj.instantaneous_data_change > 0

                    if obj.warning_counter < 10
                        warning('All Memories are Full!')
                        obj.warning_counter = obj.warning_counter + 1;
                    end

                    mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity = mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity + obj.instantaneous_data_change; % [kb]
                    obj.instantaneous_data_change = 0; % [kb]
                else
                    obj.warning_counter = 0;
                end


            else
                % Remove Data from Memory and obj.instantaneous_data_change < 0

                for i_memory = mission.true_SC{i_SC}.true_SC_body.num_hardware_exists.num_onboard_memory:-1:1

                    if mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity <= 0
                        % Skip this memory

                    elseif mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity < abs(obj.instantaneous_data_change)
                        % Delete all this memory
                        obj.instantaneous_data_change = obj.instantaneous_data_change + mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity;
                        mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity = 0; % [kb]

                    else
                        % Remove some of this memory
                        mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity = mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity + obj.instantaneous_data_change; % [kb]
                        obj.instantaneous_data_change = 0; % [kb]

                    end

                end

                if obj.instantaneous_data_change < 0

                    if obj.warning_counter < 10
                        warning('All Memories are Empty!')
                        obj.warning_counter = obj.warning_counter + 1;
                    end

                    mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity = mission.true_SC{i_SC}.true_SC_onboard_memory{i_memory}.instantaneous_capacity + obj.instantaneous_data_change; % [kb]
                    obj.instantaneous_data_change = 0; % [kb]
                else
                    obj.warning_counter = 0;
                end

            end



        end


        %% [ ] Methods: Update Instantaneous Data Generated
        % Updates instantaneous_data_generated by all HW and Classes

        function obj = func_update_instantaneous_data_generated(obj, equipment, mission, varargin)

            if isprop(equipment, 'instantaneous_data_rate_generated')
                this_instantaneous_data_generated = (equipment.instantaneous_data_rate_generated * mission.true_time.time_step); % [kb]
            elseif isprop(equipment, 'instantaneous_data_generated_per_sample')
                this_instantaneous_data_generated = equipment.instantaneous_data_generated_per_sample; % [kb]
            else
                error('Data generated incorrect!')
            end

            if ~isempty(varargin)
                chosen_memory = varargin{1};
                i_SC = varargin{2};
                mission.true_SC{i_SC}.true_SC_onboard_memory{chosen_memory}.instantaneous_capacity = mission.true_SC{i_SC}.true_SC_onboard_memory{chosen_memory}.instantaneous_capacity + this_instantaneous_data_generated; % [kb]
            else
                obj.instantaneous_data_generated = obj.instantaneous_data_generated + this_instantaneous_data_generated; % [kb]
            end

            this_name = equipment.name;
            flag_name_exisits = 0;
            this_idx = 0;

            for i = 1:1:length(obj.list_HW_data_generated)
                if strcmp( obj.list_HW_data_generated{i}, this_name )
                    flag_name_exisits = 1;
                    this_idx = i;
                end
            end

            if flag_name_exisits == 0
                error('HW not found!')
            else
                obj.array_HW_data_generated(1,this_idx) = obj.array_HW_data_generated(1,this_idx) + this_instantaneous_data_generated; % [kb]
            end

        end



        %% [ ] Methods: Update Instantaneous Data Removed
        % Updates instantaneous_data_removed by all HW and Classes

        function obj = func_update_instantaneous_data_removed(obj, equipment, mission, varargin)

            if isprop(equipment, 'instantaneous_data_rate_removed')
                this_instantaneous_data_removed = (equipment.instantaneous_data_rate_removed * mission.true_time.time_step); % [kb]
            elseif isprop(equipment, 'instantaneous_data_removed_per_sample')
                this_instantaneous_data_removed = equipment.instantaneous_data_removed_per_sample; % [kb]
            else
                error('Data removed incorrect!')
            end

            if ~isempty(varargin)
                chosen_memory = varargin{1};
                i_SC = varargin{2};
                mission.true_SC{i_SC}.true_SC_onboard_memory{chosen_memory}.instantaneous_capacity = mission.true_SC{i_SC}.true_SC_onboard_memory{chosen_memory}.instantaneous_capacity - this_instantaneous_data_removed; % [kb]
            else
                obj.instantaneous_data_removed = obj.instantaneous_data_removed + this_instantaneous_data_removed; % [kb]
            end

            this_name = equipment.name;
            flag_name_exisits = 0;
            this_idx = 0;

            for i = 1:1:length(obj.list_HW_data_removed)
                if strcmp( obj.list_HW_data_removed{i}, this_name )
                    flag_name_exisits = 1;
                    this_idx = i;
                end
            end

            if flag_name_exisits == 0
                error('HW not found!')
            else
                obj.array_HW_data_removed(1,this_idx) = obj.array_HW_data_removed(1,this_idx) + this_instantaneous_data_removed; % [kb]
            end

        end


    end
end

